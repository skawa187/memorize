version: '3.8'

services:
  nginx:
    build:
      context: ./nginx
    image: memorize-nginx:1.0
    deploy:
      resources:
        reservations:
          cpus: '0.25'
          memory: 64M
    env_file:
      - env/.nginx.env
      - env/.django.env
    networks:
      - front
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - django-static:${DJANGO_STATIC_DIR}
      - django-media:/www/data/memorize
    secrets:
      - source: server-cert
        target: /etc/ssl/certs/memorize.com.crt
      - source: server-key
        target: /etc/ssl/private/memorize.com.key
    depends_on:
      django-app:
        condition: service_started
  django-app:
    build:
      context: ./django-app
      dockerfile: Dockerfile.prod
      args:
        - APP_USER=${APP_USER}
        - DJANGO_WORKDIR=${DJANGO_WORKDIR}
        - STATIC_DIR=${DJANGO_STATIC_DIR}
        - MEDIA_DIR=${DJANGO_MEDIA_DIR}
    image: memorize:1.0
    deploy:
      resources:
        reservations:
          cpus: '0.50'
          memory: 256M
    env_file:
      - env/.django.env
      - env/.db.env
      - env/.celery.env
    networks:
      - front
      - back
    expose:
      - 8000
    volumes:
      - django-static:${DJANGO_STATIC_DIR}
      - django-media:${DJANGO_MEDIA_DIR}
    secrets:
      - source: django_key
        uid: "100"
        gid: "101"
        mode: 0440
      - source: db_pass
        uid: "100"
        gid: "101"
        mode: 0440
    command: ["gunicorn", "memorize.wsgi:application", "--bind", "0.0.0.0:8000", "--forwarded-allow-ips='nginx'",
               "--workers=4"]
    depends_on:
        db:
          condition: service_healthy
        redis:
          condition: service_started
    restart: always
  db:
    image: postgres:15.4
    deploy:
      resources:
        reservations:
          memory: 128M
    env_file:
      - env/.db.env
    networks:
      - back
    volumes:
      - pgdata-prod:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    secrets:
      - db_pass
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10
  redis:
    image: redis:7.2-alpine
    deploy:
      resources:
        reservations:
          cpus: '0.1'
          memory: 16M
      mode: replicated
      replicas: 1
    networks:
      - front
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    secrets:
      - source: redis-users
        target: /etc/redis/users.acl
    command: ["redis-server", "/etc/redis/redis.conf"]
  celery:
    image: memorize:1.0
    env_file:
      - env/.django.env
      - env/.db.env
      - env/.celery.env
    networks:
      - front
      - back
    volumes:
      - django-media:${DJANGO_MEDIA_DIR}:rw
    secrets:
      - source: django_key
        uid: "100"
        gid: "101"
        mode: 0440
      - source: db_pass
        uid: "100"
        gid: "101"
        mode: 0440
    entrypoint: [ "${DJANGO_WORKDIR}/worker-entrypoint.sh" ]
    command: ["celery", "-A", "${CELERY_APP_NAME}", "worker", "-E", "-l", "INFO"]
    depends_on:
      - redis
  celery-beat:
    extends:
      service: celery
    entrypoint: [ "${DJANGO_WORKDIR}/worker-entrypoint.sh" ]
    command: ["celery", "-A", "${CELERY_APP_NAME}", "beat", "-l", "INFO"]
    depends_on:
      - redis

volumes:
  pgdata-prod:
    driver: local
  redis-data:
    driver: local
  django-static:
    driver: local
  django-media:
    driver: local

secrets:
  django_key:
    file: django_key
  db_pass:
    file: db_pass
  redis-users:
    file: redis/users.acl
  server-cert:
    file: ./nginx/memorize.com.crt
  server-key:
    file: ./nginx/memorize.com.key

networks:
  front:
  back: